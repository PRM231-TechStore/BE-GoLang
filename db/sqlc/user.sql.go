// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const checkEmailExistence = `-- name: CheckEmailExistence :one
SELECT COUNT(*) FROM users WHERE email = ?
`

func (q *Queries) CheckEmailExistence(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExistence, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkUsernameExistence = `-- name: CheckUsernameExistence :one
SELECT COUNT(*) FROM users WHERE username = ?
`

func (q *Queries) CheckUsernameExistence(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameExistence, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserDetails = `-- name: GetUserDetails :one
SELECT id, username, password, email, phone, address
FROM users
WHERE id = ?
`

func (q *Queries) GetUserDetails(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserDetails, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT id, password
FROM users
WHERE username = ?
`

type LoginUserRow struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) LoginUser(ctx context.Context, username string) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, username)
	var i LoginUserRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (id, username, password, email) VALUES (?, ?, ?, ?)
`

type RegisterUserParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.ExecContext(ctx, registerUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
	)
	return err
}

const updateUserDetails = `-- name: UpdateUserDetails :exec
UPDATE users
SET
    email = ?,
    password = ?,
    phone = ?,
    address = ?
WHERE id = ?
`

type UpdateUserDetailsParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Phone    string `json:"phone"`
	Address  string `json:"address"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserDetails,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.Address,
		arg.ID,
	)
	return err
}
